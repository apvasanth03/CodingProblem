package com.vasanth.codingproblem.otherquestions

import org.assertj.core.api.Assertions
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.Arguments
import org.junit.jupiter.params.provider.MethodSource
import java.util.stream.Stream

class CumulativeFrequencyOfDataClassesTests {

    companion object {

        @JvmStatic
        fun provideTestData(): Stream<Arguments> {
            return Stream.of(
                Arguments.arguments(
                    intArrayOf(4, 2, 11, 6, 5, 1, 4, 3, 5, 6, 8, 7, 7, 12, 1),
                    intArrayOf(4, 10, 13, 15)
                ),
                Arguments.arguments(
                    intArrayOf(15, 12, 10, 11),
                    intArrayOf(3, 4)
                ),
                Arguments.arguments(
                    intArrayOf(
                        45, 35, 43, 62, 37, 28, 19, 31, 49, 38, 50, 30, 21,
                        48, 45, 28, 25, 37, 48, 51, 38, 34, 30, 35, 28, 26, 38, 31,
                        83, 45, 29, 28, 63, 17, 15, 62, 9, 37, 33, 26, 38, 42, 62,
                        26, 92, 57, 14, 55, 31, 43, 2, 30, 49, 22, 21, 38, 46, 40,
                        39, 29, 38, 43, 45, 4, 46, 35, 38, 55, 52, 68, 55, 48, 44,
                        44, 42, 65, 43, 38, 36, 23, 71, 38, 28, 64, 36, 35, 4, 33,
                        52, 32, 41, 43, 53, 44, 33, 7, 10, 46, 43, 45
                    ),
                    intArrayOf(7, 18, 56, 86, 96, 98, 100)
                ),
                Arguments.arguments(
                    intArrayOf(
                        76, 25, 13, 36, 74, 85, 16, 77, 70, 77, 81, 27, 30,
                        79, 24, 75, 76, 71, 78, 32, 24, 41, 72, 30, 42, 16, 74, 29,
                        70, 18, 32, 70, 74, 83, 31, 37, 32, 64, 31, 36, 79, 75, 41,
                        76, 70, 28, 70, 74, 64, 34, 33, 34, 32, 70, 66, 24, 78, 68,
                        34, 20, 19, 87, 20, 26, 29, 70, 78, 25, 22, 41, 74, 19, 64,
                        32, 72, 72, 14, 76, 37, 16, 32, 43, 24, 18, 28, 85, 70, 75,
                        29, 22, 25, 34, 43, 28, 19, 87, 17, 31, 30, 71, 31, 35, 34,
                        70, 34, 33, 13, 26, 31, 71, 66, 79, 22, 10, 20, 27, 22, 29,
                        73, 77, 78, 16, 70, 28, 76, 63, 79, 76, 32, 68, 65, 76, 24,
                        62, 70, 72, 82, 18, 10, 16, 76, 73, 20, 76, 76, 31, 76, 38,
                        80, 31, 39, 74, 67, 24, 19, 81, 17, 29, 12, 21, 27, 21, 25,
                        61, 28, 79, 33, 67, 71, 22, 31, 76, 79, 31, 77, 11, 34, 39,
                        43, 74, 20, 32, 76, 78, 73, 27, 72, 33, 73, 65, 82, 77, 62,
                        79, 8, 32, 34, 25, 79, 74, 71, 14, 30, 29, 22, 30, 39, 71,
                        32, 77, 28, 18, 12, 66, 68, 22, 88, 7, 22, 20, 25, 62, 76,
                        72, 31, 25, 16, 37, 79, 70, 76, 27, 78, 34, 27, 36, 9, 40,
                        22, 27, 17, 70, 17, 70, 87, 16, 38, 21, 18, 31, 35, 22, 33,
                        79, 13, 39, 27, 27, 34, 65, 25, 33, 25, 16, 75, 25, 37, 8,
                        24, 32, 32, 88, 31, 75, 9, 25, 19, 70, 32, 33, 69, 33, 15,
                        25, 25, 29, 77, 22, 41, 39, 18, 74, 75, 13, 11, 77, 82, 65,
                        29, 30, 23, 27, 74, 24, 88, 26, 25, 74, 20, 26, 30, 23, 33,
                        76, 35, 96, 78, 23, 35, 73, 37, 17, 18, 20, 14, 12, 63, 76,
                        62, 87, 30, 16, 27, 20, 79, 76, 77, 26, 84, 74, 75, 71, 23,
                        20, 70, 25, 39, 26, 78, 24, 17, 68, 27, 70, 74, 36, 18, 76,
                        70, 17, 72, 30, 78, 13, 34, 83, 76, 73, 72, 72, 20, 30, 32,
                        69, 34, 18, 72, 29, 17, 64, 37, 25, 32, 25, 71, 25, 32, 24,
                        77, 34, 34, 17, 19, 76, 62, 21, 25, 14, 66, 17, 61, 69, 36,
                        65, 28, 9, 70, 28, 25, 22, 35, 28, 27, 72, 74, 21, 17, 63, 20,
                        21, 21, 63, 16, 20, 18, 25, 31, 23, 83, 79, 81, 72, 66, 31, 67,
                        27, 67, 32, 36, 41, 70, 33, 30, 64, 43, 61, 78, 76, 71, 12, 39,
                        67, 36, 81, 38, 28, 38, 20, 71, 42, 17, 71, 16, 16, 7, 25, 69,
                        19, 16, 42, 25, 25, 85, 33, 32, 64, 22, 28, 31, 64, 78, 34, 27,
                        79, 65, 70, 26, 62, 29, 43, 32, 71, 33, 67, 33, 40, 29, 70, 79, 69
                    ),
                    intArrayOf(38, 147, 269, 301, 301, 332, 442, 492, 500)
                ),
                Arguments.arguments(
                    intArrayOf(
                        13, 11, 13, 13, 16, 15, 15, 11, 14, 12, 12, 16, 15, 14, 15, 21,
                        16, 14, 12, 16, 15, 15, 16, 14, 16, 13, 11, 12, 13, 11, 16, 14, 13, 11,
                        12, 15, 12, 12, 12, 12, 12, 13, 16, 13, 16, 10, 15, 16, 16, 12
                    ),
                    intArrayOf(6, 25, 38, 49, 49, 50)
                ),
                Arguments.arguments(
                    intArrayOf(
                        45, 21, 12, 68, 18, 67, 48, 3, 19, 74, 14, 50, 63, 61, 52, 17, 16,
                        39, 48, 55, 50, 48, 51, 65, 27, 13, 54, 44, 3, 51, 57, 57, 41, 68, 53, 12,
                        58, 66, 30, 21, 12, 57, 59, 48, 42, 53, 19, 12, 18, 52, 52, 27, 42, 61, 58,
                        55, 20, 57, 20, 9, 66, 56, 62, 58, 11, 8, 58, 16, 12, 15, 42, 16, 21, 73, 46,
                        65, 48, 57, 22, 48, 43, 21, 63, 17, 15, 67, 11, 57, 26, 40, 40, 25, 17, 56, 4,
                        11, 14, 46, 13, 51, 18, 22, 9, 57, 63, 62, 9, 58, 13, 72, 63, 51, 20, 3, 61, 62,
                        18, 47, 16, 55, 75, 70, 57, 72, 41, 13, 17, 60, 65, 64, 3, 54, 12, 56, 58, 52, 15,
                        56, 8, 74, 66, 65, 63, 60, 51, 7, 67, 44, 19, 21, 12, 54, 21, 30, 53, 49, 14, 14, 12,
                        51, 55, 54, 3, 61, 17, 23, 52, 21, 12, 18, 48, 16, 39, 14, 50, 57, 67, 66, 21, 14, 67,
                        63, 55, 17, 13, 72, 55, 12, 40, 66, 7, 4, 54, 74, 18, 14, 59, 47, 11, 57, 16, 5, 16, 51,
                        41, 30, 54, 19, 82, 66, 10, 3, 52, 57, 57, 21, 55, 41, 15, 47, 63, 39, 75, 65, 63, 13, 13,
                        10, 63, 68, 66, 61, 66, 58, 56, 59, 15, 16, 43, 53, 66, 69, 69, 60, 60, 18, 54, 18, 57, 5
                    ),
                    intArrayOf(33, 92, 100, 113, 147, 205, 243, 250)
                ),
                Arguments.arguments(
                    intArrayOf(5, 7),
                    intArrayOf(2)
                )
            )
        }
    }

    @ParameterizedTest
    @MethodSource("provideTestData")
    fun `test cumulative frequency of data classes`(
        arr: IntArray,
        expectedResult: IntArray
    ) {
        val result = cumulativeFrequencyOfDataClasses(arr)

        Assertions.assertThat(result).isEqualTo(expectedResult)
    }

}